//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Map_Bul_App.iOS.MapBulWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="http://MapBul.ru/")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserTypeByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMarkersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionMarkersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRequestSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMarkerDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRootCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecentArticlesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecentEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMarkerOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditMarkerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermittedCitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermittedCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterTenantOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecoverPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFavoriteArticleAndEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFavoriteMarkerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFavoriteArticleAndEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFavoriteMarkerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFavoritsArticlAndEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFavoritsMarkerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRelatedEventsFromMarkerOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = "http://service.mapbul.scub111.com/WebService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AuthorizeCompletedEventHandler AuthorizeCompleted;
        
        /// <remarks/>
        public event GetUserTypeByIdCompletedEventHandler GetUserTypeByIdCompleted;
        
        /// <remarks/>
        public event GetMarkersCompletedEventHandler GetMarkersCompleted;
        
        /// <remarks/>
        public event GetSessionMarkersCompletedEventHandler GetSessionMarkersCompleted;
        
        /// <remarks/>
        public event RemoveRequestSessionCompletedEventHandler RemoveRequestSessionCompleted;
        
        /// <remarks/>
        public event GetMarkerDescriptionCompletedEventHandler GetMarkerDescriptionCompleted;
        
        /// <remarks/>
        public event GetRootCategoriesCompletedEventHandler GetRootCategoriesCompleted;
        
        /// <remarks/>
        public event GetRecentArticlesCompletedEventHandler GetRecentArticlesCompleted;
        
        /// <remarks/>
        public event GetRecentEventsCompletedEventHandler GetRecentEventsCompleted;
        
        /// <remarks/>
        public event CreateMarkerCompletedEventHandler CreateMarkerCompleted;
        
        /// <remarks/>
        public event EditMarkerCompletedEventHandler EditMarkerCompleted;
        
        /// <remarks/>
        public event GetPermittedCitiesCompletedEventHandler GetPermittedCitiesCompleted;
        
        /// <remarks/>
        public event GetPermittedCountryCompletedEventHandler GetPermittedCountryCompleted;
        
        /// <remarks/>
        public event RegisterTenantCompletedEventHandler RegisterTenantCompleted;
        
        /// <remarks/>
        public event RecoverPasswordCompletedEventHandler RecoverPasswordCompleted;
        
        /// <remarks/>
        public event SaveFavoriteArticleAndEventCompletedEventHandler SaveFavoriteArticleAndEventCompleted;
        
        /// <remarks/>
        public event SaveFavoriteMarkerCompletedEventHandler SaveFavoriteMarkerCompleted;
        
        /// <remarks/>
        public event RemoveFavoriteArticleAndEventCompletedEventHandler RemoveFavoriteArticleAndEventCompleted;
        
        /// <remarks/>
        public event RemoveFavoriteMarkerCompletedEventHandler RemoveFavoriteMarkerCompleted;
        
        /// <remarks/>
        public event GetFavoritsArticlAndEventCompletedEventHandler GetFavoritsArticlAndEventCompleted;
        
        /// <remarks/>
        public event GetFavoritsMarkerCompletedEventHandler GetFavoritsMarkerCompleted;
        
        /// <remarks/>
        public event GetRelatedEventsFromMarkerCompletedEventHandler GetRelatedEventsFromMarkerCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/Authorize", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Authorize(string email, string password) {
            object[] results = this.Invoke("Authorize", new object[] {
                        email,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeAsync(string email, string password) {
            this.AuthorizeAsync(email, password, null);
        }
        
        /// <remarks/>
        public void AuthorizeAsync(string email, string password, object userState) {
            if ((this.AuthorizeOperationCompleted == null)) {
                this.AuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeOperationCompleted);
            }
            this.InvokeAsync("Authorize", new object[] {
                        email,
                        password}, this.AuthorizeOperationCompleted, userState);
        }
        
        private void OnAuthorizeOperationCompleted(object arg) {
            if ((this.AuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeCompleted(this, new AuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetUserTypeById", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserTypeById(int id, string userGuid) {
            object[] results = this.Invoke("GetUserTypeById", new object[] {
                        id,
                        userGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserTypeByIdAsync(int id, string userGuid) {
            this.GetUserTypeByIdAsync(id, userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserTypeByIdAsync(int id, string userGuid, object userState) {
            if ((this.GetUserTypeByIdOperationCompleted == null)) {
                this.GetUserTypeByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTypeByIdOperationCompleted);
            }
            this.InvokeAsync("GetUserTypeById", new object[] {
                        id,
                        userGuid}, this.GetUserTypeByIdOperationCompleted, userState);
        }
        
        private void OnGetUserTypeByIdOperationCompleted(object arg) {
            if ((this.GetUserTypeByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserTypeByIdCompleted(this, new GetUserTypeByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetMarkers", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMarkers(double p1Lat, double p1Lng, double p2Lat, double p2Lng, string userGuid, string appLang) {
            object[] results = this.Invoke("GetMarkers", new object[] {
                        p1Lat,
                        p1Lng,
                        p2Lat,
                        p2Lng,
                        userGuid,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMarkersAsync(double p1Lat, double p1Lng, double p2Lat, double p2Lng, string userGuid, string appLang) {
            this.GetMarkersAsync(p1Lat, p1Lng, p2Lat, p2Lng, userGuid, appLang, null);
        }
        
        /// <remarks/>
        public void GetMarkersAsync(double p1Lat, double p1Lng, double p2Lat, double p2Lng, string userGuid, string appLang, object userState) {
            if ((this.GetMarkersOperationCompleted == null)) {
                this.GetMarkersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMarkersOperationCompleted);
            }
            this.InvokeAsync("GetMarkers", new object[] {
                        p1Lat,
                        p1Lng,
                        p2Lat,
                        p2Lng,
                        userGuid,
                        appLang}, this.GetMarkersOperationCompleted, userState);
        }
        
        private void OnGetMarkersOperationCompleted(object arg) {
            if ((this.GetMarkersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMarkersCompleted(this, new GetMarkersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetSessionMarkers", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSessionMarkers(double p1Lat, double p1Lng, double p2Lat, double p2Lng, string sessionId, string userGuid, string appLang) {
            object[] results = this.Invoke("GetSessionMarkers", new object[] {
                        p1Lat,
                        p1Lng,
                        p2Lat,
                        p2Lng,
                        sessionId,
                        userGuid,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionMarkersAsync(double p1Lat, double p1Lng, double p2Lat, double p2Lng, string sessionId, string userGuid, string appLang) {
            this.GetSessionMarkersAsync(p1Lat, p1Lng, p2Lat, p2Lng, sessionId, userGuid, appLang, null);
        }
        
        /// <remarks/>
        public void GetSessionMarkersAsync(double p1Lat, double p1Lng, double p2Lat, double p2Lng, string sessionId, string userGuid, string appLang, object userState) {
            if ((this.GetSessionMarkersOperationCompleted == null)) {
                this.GetSessionMarkersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionMarkersOperationCompleted);
            }
            this.InvokeAsync("GetSessionMarkers", new object[] {
                        p1Lat,
                        p1Lng,
                        p2Lat,
                        p2Lng,
                        sessionId,
                        userGuid,
                        appLang}, this.GetSessionMarkersOperationCompleted, userState);
        }
        
        private void OnGetSessionMarkersOperationCompleted(object arg) {
            if ((this.GetSessionMarkersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionMarkersCompleted(this, new GetSessionMarkersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/RemoveRequestSession", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveRequestSession(string sessionId) {
            object[] results = this.Invoke("RemoveRequestSession", new object[] {
                        sessionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveRequestSessionAsync(string sessionId) {
            this.RemoveRequestSessionAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void RemoveRequestSessionAsync(string sessionId, object userState) {
            if ((this.RemoveRequestSessionOperationCompleted == null)) {
                this.RemoveRequestSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRequestSessionOperationCompleted);
            }
            this.InvokeAsync("RemoveRequestSession", new object[] {
                        sessionId}, this.RemoveRequestSessionOperationCompleted, userState);
        }
        
        private void OnRemoveRequestSessionOperationCompleted(object arg) {
            if ((this.RemoveRequestSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRequestSessionCompleted(this, new RemoveRequestSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetMarkerDescription", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMarkerDescription(int markerId, string appLang) {
            object[] results = this.Invoke("GetMarkerDescription", new object[] {
                        markerId,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMarkerDescriptionAsync(int markerId, string appLang) {
            this.GetMarkerDescriptionAsync(markerId, appLang, null);
        }
        
        /// <remarks/>
        public void GetMarkerDescriptionAsync(int markerId, string appLang, object userState) {
            if ((this.GetMarkerDescriptionOperationCompleted == null)) {
                this.GetMarkerDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMarkerDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetMarkerDescription", new object[] {
                        markerId,
                        appLang}, this.GetMarkerDescriptionOperationCompleted, userState);
        }
        
        private void OnGetMarkerDescriptionOperationCompleted(object arg) {
            if ((this.GetMarkerDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMarkerDescriptionCompleted(this, new GetMarkerDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetRootCategories", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRootCategories(string appLang) {
            object[] results = this.Invoke("GetRootCategories", new object[] {
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRootCategoriesAsync(string appLang) {
            this.GetRootCategoriesAsync(appLang, null);
        }
        
        /// <remarks/>
        public void GetRootCategoriesAsync(string appLang, object userState) {
            if ((this.GetRootCategoriesOperationCompleted == null)) {
                this.GetRootCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRootCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetRootCategories", new object[] {
                        appLang}, this.GetRootCategoriesOperationCompleted, userState);
        }
        
        private void OnGetRootCategoriesOperationCompleted(object arg) {
            if ((this.GetRootCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRootCategoriesCompleted(this, new GetRootCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetRecentArticles", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRecentArticles(string appLang, bool refresh, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> existingDateTime) {
            object[] results = this.Invoke("GetRecentArticles", new object[] {
                        appLang,
                        refresh,
                        existingDateTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRecentArticlesAsync(string appLang, bool refresh, System.Nullable<System.DateTime> existingDateTime) {
            this.GetRecentArticlesAsync(appLang, refresh, existingDateTime, null);
        }
        
        /// <remarks/>
        public void GetRecentArticlesAsync(string appLang, bool refresh, System.Nullable<System.DateTime> existingDateTime, object userState) {
            if ((this.GetRecentArticlesOperationCompleted == null)) {
                this.GetRecentArticlesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecentArticlesOperationCompleted);
            }
            this.InvokeAsync("GetRecentArticles", new object[] {
                        appLang,
                        refresh,
                        existingDateTime}, this.GetRecentArticlesOperationCompleted, userState);
        }
        
        private void OnGetRecentArticlesOperationCompleted(object arg) {
            if ((this.GetRecentArticlesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecentArticlesCompleted(this, new GetRecentArticlesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetRecentEvents", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRecentEvents(string appLang, bool refresh, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> existingDateTime) {
            object[] results = this.Invoke("GetRecentEvents", new object[] {
                        appLang,
                        refresh,
                        existingDateTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRecentEventsAsync(string appLang, bool refresh, System.Nullable<System.DateTime> existingDateTime) {
            this.GetRecentEventsAsync(appLang, refresh, existingDateTime, null);
        }
        
        /// <remarks/>
        public void GetRecentEventsAsync(string appLang, bool refresh, System.Nullable<System.DateTime> existingDateTime, object userState) {
            if ((this.GetRecentEventsOperationCompleted == null)) {
                this.GetRecentEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecentEventsOperationCompleted);
            }
            this.InvokeAsync("GetRecentEvents", new object[] {
                        appLang,
                        refresh,
                        existingDateTime}, this.GetRecentEventsOperationCompleted, userState);
        }
        
        private void OnGetRecentEventsOperationCompleted(object arg) {
            if ((this.GetRecentEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecentEventsCompleted(this, new GetRecentEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/CreateMarker", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateMarker(
                    string userGuid, 
                    string name, 
                    string introduction, 
                    string description, 
                    int cityId, 
                    int baseCategoryId, 
                    double lat, 
                    double lng, 
                    string entryTicket, 
                    int discount, 
                    string street, 
                    string house, 
                    string building, 
                    string floor, 
                    string site, 
                    string email, 
                    string[] photoBase64, 
                    int[] subCategoryIds, 
                    string[] phones, 
                    KeyValueOfInt32Int32[] openTimes, 
                    KeyValueOfInt32Int32[] closeTimes, 
                    bool isPersonal, 
                    string appLang) {
            object[] results = this.Invoke("CreateMarker", new object[] {
                        userGuid,
                        name,
                        introduction,
                        description,
                        cityId,
                        baseCategoryId,
                        lat,
                        lng,
                        entryTicket,
                        discount,
                        street,
                        house,
                        building,
                        floor,
                        site,
                        email,
                        photoBase64,
                        subCategoryIds,
                        phones,
                        openTimes,
                        closeTimes,
                        isPersonal,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateMarkerAsync(
                    string userGuid, 
                    string name, 
                    string introduction, 
                    string description, 
                    int cityId, 
                    int baseCategoryId, 
                    double lat, 
                    double lng, 
                    string entryTicket, 
                    int discount, 
                    string street, 
                    string house, 
                    string building, 
                    string floor, 
                    string site, 
                    string email, 
                    string[] photoBase64, 
                    int[] subCategoryIds, 
                    string[] phones, 
                    KeyValueOfInt32Int32[] openTimes, 
                    KeyValueOfInt32Int32[] closeTimes, 
                    bool isPersonal, 
                    string appLang) {
            this.CreateMarkerAsync(userGuid, name, introduction, description, cityId, baseCategoryId, lat, lng, entryTicket, discount, street, house, building, floor, site, email, photoBase64, subCategoryIds, phones, openTimes, closeTimes, isPersonal, appLang, null);
        }
        
        /// <remarks/>
        public void CreateMarkerAsync(
                    string userGuid, 
                    string name, 
                    string introduction, 
                    string description, 
                    int cityId, 
                    int baseCategoryId, 
                    double lat, 
                    double lng, 
                    string entryTicket, 
                    int discount, 
                    string street, 
                    string house, 
                    string building, 
                    string floor, 
                    string site, 
                    string email, 
                    string[] photoBase64, 
                    int[] subCategoryIds, 
                    string[] phones, 
                    KeyValueOfInt32Int32[] openTimes, 
                    KeyValueOfInt32Int32[] closeTimes, 
                    bool isPersonal, 
                    string appLang, 
                    object userState) {
            if ((this.CreateMarkerOperationCompleted == null)) {
                this.CreateMarkerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMarkerOperationCompleted);
            }
            this.InvokeAsync("CreateMarker", new object[] {
                        userGuid,
                        name,
                        introduction,
                        description,
                        cityId,
                        baseCategoryId,
                        lat,
                        lng,
                        entryTicket,
                        discount,
                        street,
                        house,
                        building,
                        floor,
                        site,
                        email,
                        photoBase64,
                        subCategoryIds,
                        phones,
                        openTimes,
                        closeTimes,
                        isPersonal,
                        appLang}, this.CreateMarkerOperationCompleted, userState);
        }
        
        private void OnCreateMarkerOperationCompleted(object arg) {
            if ((this.CreateMarkerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMarkerCompleted(this, new CreateMarkerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/EditMarker", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EditMarker(
                    string userGuid, 
                    string name, 
                    string introduction, 
                    string description, 
                    int cityId, 
                    int baseCategoryId, 
                    double lat, 
                    double lng, 
                    string entryTicket, 
                    int discount, 
                    string street, 
                    string house, 
                    string building, 
                    string floor, 
                    string site, 
                    string email, 
                    string[] photoBase64, 
                    int[] subCategoryIds, 
                    string[] phones, 
                    KeyValueOfInt32Int32[] openTimes, 
                    KeyValueOfInt32Int32[] closeTimes, 
                    bool isPersonal, 
                    int markerId, 
                    string appLang) {
            object[] results = this.Invoke("EditMarker", new object[] {
                        userGuid,
                        name,
                        introduction,
                        description,
                        cityId,
                        baseCategoryId,
                        lat,
                        lng,
                        entryTicket,
                        discount,
                        street,
                        house,
                        building,
                        floor,
                        site,
                        email,
                        photoBase64,
                        subCategoryIds,
                        phones,
                        openTimes,
                        closeTimes,
                        isPersonal,
                        markerId,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EditMarkerAsync(
                    string userGuid, 
                    string name, 
                    string introduction, 
                    string description, 
                    int cityId, 
                    int baseCategoryId, 
                    double lat, 
                    double lng, 
                    string entryTicket, 
                    int discount, 
                    string street, 
                    string house, 
                    string building, 
                    string floor, 
                    string site, 
                    string email, 
                    string[] photoBase64, 
                    int[] subCategoryIds, 
                    string[] phones, 
                    KeyValueOfInt32Int32[] openTimes, 
                    KeyValueOfInt32Int32[] closeTimes, 
                    bool isPersonal, 
                    int markerId, 
                    string appLang) {
            this.EditMarkerAsync(userGuid, name, introduction, description, cityId, baseCategoryId, lat, lng, entryTicket, discount, street, house, building, floor, site, email, photoBase64, subCategoryIds, phones, openTimes, closeTimes, isPersonal, markerId, appLang, null);
        }
        
        /// <remarks/>
        public void EditMarkerAsync(
                    string userGuid, 
                    string name, 
                    string introduction, 
                    string description, 
                    int cityId, 
                    int baseCategoryId, 
                    double lat, 
                    double lng, 
                    string entryTicket, 
                    int discount, 
                    string street, 
                    string house, 
                    string building, 
                    string floor, 
                    string site, 
                    string email, 
                    string[] photoBase64, 
                    int[] subCategoryIds, 
                    string[] phones, 
                    KeyValueOfInt32Int32[] openTimes, 
                    KeyValueOfInt32Int32[] closeTimes, 
                    bool isPersonal, 
                    int markerId, 
                    string appLang, 
                    object userState) {
            if ((this.EditMarkerOperationCompleted == null)) {
                this.EditMarkerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditMarkerOperationCompleted);
            }
            this.InvokeAsync("EditMarker", new object[] {
                        userGuid,
                        name,
                        introduction,
                        description,
                        cityId,
                        baseCategoryId,
                        lat,
                        lng,
                        entryTicket,
                        discount,
                        street,
                        house,
                        building,
                        floor,
                        site,
                        email,
                        photoBase64,
                        subCategoryIds,
                        phones,
                        openTimes,
                        closeTimes,
                        isPersonal,
                        markerId,
                        appLang}, this.EditMarkerOperationCompleted, userState);
        }
        
        private void OnEditMarkerOperationCompleted(object arg) {
            if ((this.EditMarkerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditMarkerCompleted(this, new EditMarkerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetPermittedCities", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPermittedCities(string userGuid, bool isPersonal) {
            object[] results = this.Invoke("GetPermittedCities", new object[] {
                        userGuid,
                        isPersonal});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPermittedCitiesAsync(string userGuid, bool isPersonal) {
            this.GetPermittedCitiesAsync(userGuid, isPersonal, null);
        }
        
        /// <remarks/>
        public void GetPermittedCitiesAsync(string userGuid, bool isPersonal, object userState) {
            if ((this.GetPermittedCitiesOperationCompleted == null)) {
                this.GetPermittedCitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermittedCitiesOperationCompleted);
            }
            this.InvokeAsync("GetPermittedCities", new object[] {
                        userGuid,
                        isPersonal}, this.GetPermittedCitiesOperationCompleted, userState);
        }
        
        private void OnGetPermittedCitiesOperationCompleted(object arg) {
            if ((this.GetPermittedCitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermittedCitiesCompleted(this, new GetPermittedCitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetPermittedCountry", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPermittedCountry(string userGuid) {
            object[] results = this.Invoke("GetPermittedCountry", new object[] {
                        userGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPermittedCountryAsync(string userGuid) {
            this.GetPermittedCountryAsync(userGuid, null);
        }
        
        /// <remarks/>
        public void GetPermittedCountryAsync(string userGuid, object userState) {
            if ((this.GetPermittedCountryOperationCompleted == null)) {
                this.GetPermittedCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermittedCountryOperationCompleted);
            }
            this.InvokeAsync("GetPermittedCountry", new object[] {
                        userGuid}, this.GetPermittedCountryOperationCompleted, userState);
        }
        
        private void OnGetPermittedCountryOperationCompleted(object arg) {
            if ((this.GetPermittedCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermittedCountryCompleted(this, new GetPermittedCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/RegisterTenant", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterTenant(string email, string firstName, string middleName, string lastName, System.DateTime birthDate, string gender, string phone, string address, string appLang) {
            object[] results = this.Invoke("RegisterTenant", new object[] {
                        email,
                        firstName,
                        middleName,
                        lastName,
                        birthDate,
                        gender,
                        phone,
                        address,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterTenantAsync(string email, string firstName, string middleName, string lastName, System.DateTime birthDate, string gender, string phone, string address, string appLang) {
            this.RegisterTenantAsync(email, firstName, middleName, lastName, birthDate, gender, phone, address, appLang, null);
        }
        
        /// <remarks/>
        public void RegisterTenantAsync(string email, string firstName, string middleName, string lastName, System.DateTime birthDate, string gender, string phone, string address, string appLang, object userState) {
            if ((this.RegisterTenantOperationCompleted == null)) {
                this.RegisterTenantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterTenantOperationCompleted);
            }
            this.InvokeAsync("RegisterTenant", new object[] {
                        email,
                        firstName,
                        middleName,
                        lastName,
                        birthDate,
                        gender,
                        phone,
                        address,
                        appLang}, this.RegisterTenantOperationCompleted, userState);
        }
        
        private void OnRegisterTenantOperationCompleted(object arg) {
            if ((this.RegisterTenantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterTenantCompleted(this, new RegisterTenantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/RecoverPassword", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RecoverPassword(string email, string appLang) {
            object[] results = this.Invoke("RecoverPassword", new object[] {
                        email,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RecoverPasswordAsync(string email, string appLang) {
            this.RecoverPasswordAsync(email, appLang, null);
        }
        
        /// <remarks/>
        public void RecoverPasswordAsync(string email, string appLang, object userState) {
            if ((this.RecoverPasswordOperationCompleted == null)) {
                this.RecoverPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecoverPasswordOperationCompleted);
            }
            this.InvokeAsync("RecoverPassword", new object[] {
                        email,
                        appLang}, this.RecoverPasswordOperationCompleted, userState);
        }
        
        private void OnRecoverPasswordOperationCompleted(object arg) {
            if ((this.RecoverPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecoverPasswordCompleted(this, new RecoverPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/SaveFavoriteArticleAndEvent", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveFavoriteArticleAndEvent(string userGuid, int articleEventId) {
            object[] results = this.Invoke("SaveFavoriteArticleAndEvent", new object[] {
                        userGuid,
                        articleEventId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFavoriteArticleAndEventAsync(string userGuid, int articleEventId) {
            this.SaveFavoriteArticleAndEventAsync(userGuid, articleEventId, null);
        }
        
        /// <remarks/>
        public void SaveFavoriteArticleAndEventAsync(string userGuid, int articleEventId, object userState) {
            if ((this.SaveFavoriteArticleAndEventOperationCompleted == null)) {
                this.SaveFavoriteArticleAndEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFavoriteArticleAndEventOperationCompleted);
            }
            this.InvokeAsync("SaveFavoriteArticleAndEvent", new object[] {
                        userGuid,
                        articleEventId}, this.SaveFavoriteArticleAndEventOperationCompleted, userState);
        }
        
        private void OnSaveFavoriteArticleAndEventOperationCompleted(object arg) {
            if ((this.SaveFavoriteArticleAndEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFavoriteArticleAndEventCompleted(this, new SaveFavoriteArticleAndEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/SaveFavoriteMarker", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveFavoriteMarker(string userGuid, int markerId) {
            object[] results = this.Invoke("SaveFavoriteMarker", new object[] {
                        userGuid,
                        markerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFavoriteMarkerAsync(string userGuid, int markerId) {
            this.SaveFavoriteMarkerAsync(userGuid, markerId, null);
        }
        
        /// <remarks/>
        public void SaveFavoriteMarkerAsync(string userGuid, int markerId, object userState) {
            if ((this.SaveFavoriteMarkerOperationCompleted == null)) {
                this.SaveFavoriteMarkerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFavoriteMarkerOperationCompleted);
            }
            this.InvokeAsync("SaveFavoriteMarker", new object[] {
                        userGuid,
                        markerId}, this.SaveFavoriteMarkerOperationCompleted, userState);
        }
        
        private void OnSaveFavoriteMarkerOperationCompleted(object arg) {
            if ((this.SaveFavoriteMarkerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFavoriteMarkerCompleted(this, new SaveFavoriteMarkerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/RemoveFavoriteArticleAndEvent", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveFavoriteArticleAndEvent(string userGuid, int articleEventId) {
            object[] results = this.Invoke("RemoveFavoriteArticleAndEvent", new object[] {
                        userGuid,
                        articleEventId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveFavoriteArticleAndEventAsync(string userGuid, int articleEventId) {
            this.RemoveFavoriteArticleAndEventAsync(userGuid, articleEventId, null);
        }
        
        /// <remarks/>
        public void RemoveFavoriteArticleAndEventAsync(string userGuid, int articleEventId, object userState) {
            if ((this.RemoveFavoriteArticleAndEventOperationCompleted == null)) {
                this.RemoveFavoriteArticleAndEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFavoriteArticleAndEventOperationCompleted);
            }
            this.InvokeAsync("RemoveFavoriteArticleAndEvent", new object[] {
                        userGuid,
                        articleEventId}, this.RemoveFavoriteArticleAndEventOperationCompleted, userState);
        }
        
        private void OnRemoveFavoriteArticleAndEventOperationCompleted(object arg) {
            if ((this.RemoveFavoriteArticleAndEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFavoriteArticleAndEventCompleted(this, new RemoveFavoriteArticleAndEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/RemoveFavoriteMarker", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveFavoriteMarker(string userGuid, int markerId) {
            object[] results = this.Invoke("RemoveFavoriteMarker", new object[] {
                        userGuid,
                        markerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveFavoriteMarkerAsync(string userGuid, int markerId) {
            this.RemoveFavoriteMarkerAsync(userGuid, markerId, null);
        }
        
        /// <remarks/>
        public void RemoveFavoriteMarkerAsync(string userGuid, int markerId, object userState) {
            if ((this.RemoveFavoriteMarkerOperationCompleted == null)) {
                this.RemoveFavoriteMarkerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFavoriteMarkerOperationCompleted);
            }
            this.InvokeAsync("RemoveFavoriteMarker", new object[] {
                        userGuid,
                        markerId}, this.RemoveFavoriteMarkerOperationCompleted, userState);
        }
        
        private void OnRemoveFavoriteMarkerOperationCompleted(object arg) {
            if ((this.RemoveFavoriteMarkerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFavoriteMarkerCompleted(this, new RemoveFavoriteMarkerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetFavoritsArticlAndEvent", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFavoritsArticlAndEvent(string userGuid, string appLang) {
            object[] results = this.Invoke("GetFavoritsArticlAndEvent", new object[] {
                        userGuid,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFavoritsArticlAndEventAsync(string userGuid, string appLang) {
            this.GetFavoritsArticlAndEventAsync(userGuid, appLang, null);
        }
        
        /// <remarks/>
        public void GetFavoritsArticlAndEventAsync(string userGuid, string appLang, object userState) {
            if ((this.GetFavoritsArticlAndEventOperationCompleted == null)) {
                this.GetFavoritsArticlAndEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFavoritsArticlAndEventOperationCompleted);
            }
            this.InvokeAsync("GetFavoritsArticlAndEvent", new object[] {
                        userGuid,
                        appLang}, this.GetFavoritsArticlAndEventOperationCompleted, userState);
        }
        
        private void OnGetFavoritsArticlAndEventOperationCompleted(object arg) {
            if ((this.GetFavoritsArticlAndEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFavoritsArticlAndEventCompleted(this, new GetFavoritsArticlAndEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetFavoritsMarker", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFavoritsMarker(string userGuid, string appLang) {
            object[] results = this.Invoke("GetFavoritsMarker", new object[] {
                        userGuid,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFavoritsMarkerAsync(string userGuid, string appLang) {
            this.GetFavoritsMarkerAsync(userGuid, appLang, null);
        }
        
        /// <remarks/>
        public void GetFavoritsMarkerAsync(string userGuid, string appLang, object userState) {
            if ((this.GetFavoritsMarkerOperationCompleted == null)) {
                this.GetFavoritsMarkerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFavoritsMarkerOperationCompleted);
            }
            this.InvokeAsync("GetFavoritsMarker", new object[] {
                        userGuid,
                        appLang}, this.GetFavoritsMarkerOperationCompleted, userState);
        }
        
        private void OnGetFavoritsMarkerOperationCompleted(object arg) {
            if ((this.GetFavoritsMarkerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFavoritsMarkerCompleted(this, new GetFavoritsMarkerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://MapBul.ru/GetRelatedEventsFromMarker", RequestNamespace="http://MapBul.ru/", ResponseNamespace="http://MapBul.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRelatedEventsFromMarker(int markerId, bool nearest, string appLang) {
            object[] results = this.Invoke("GetRelatedEventsFromMarker", new object[] {
                        markerId,
                        nearest,
                        appLang});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRelatedEventsFromMarkerAsync(int markerId, bool nearest, string appLang) {
            this.GetRelatedEventsFromMarkerAsync(markerId, nearest, appLang, null);
        }
        
        /// <remarks/>
        public void GetRelatedEventsFromMarkerAsync(int markerId, bool nearest, string appLang, object userState) {
            if ((this.GetRelatedEventsFromMarkerOperationCompleted == null)) {
                this.GetRelatedEventsFromMarkerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRelatedEventsFromMarkerOperationCompleted);
            }
            this.InvokeAsync("GetRelatedEventsFromMarker", new object[] {
                        markerId,
                        nearest,
                        appLang}, this.GetRelatedEventsFromMarkerOperationCompleted, userState);
        }
        
        private void OnGetRelatedEventsFromMarkerOperationCompleted(object arg) {
            if ((this.GetRelatedEventsFromMarkerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRelatedEventsFromMarkerCompleted(this, new GetRelatedEventsFromMarkerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://MapBul.ru/")]
    public partial class KeyValueOfInt32Int32 {
        
        private int keyField;
        
        private int valueField;
        
        /// <remarks/>
        public int Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public int Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AuthorizeCompletedEventHandler(object sender, AuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetUserTypeByIdCompletedEventHandler(object sender, GetUserTypeByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserTypeByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserTypeByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetMarkersCompletedEventHandler(object sender, GetMarkersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMarkersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMarkersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSessionMarkersCompletedEventHandler(object sender, GetSessionMarkersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionMarkersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionMarkersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RemoveRequestSessionCompletedEventHandler(object sender, RemoveRequestSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRequestSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveRequestSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetMarkerDescriptionCompletedEventHandler(object sender, GetMarkerDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMarkerDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMarkerDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetRootCategoriesCompletedEventHandler(object sender, GetRootCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRootCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRootCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetRecentArticlesCompletedEventHandler(object sender, GetRecentArticlesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecentArticlesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecentArticlesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetRecentEventsCompletedEventHandler(object sender, GetRecentEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecentEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecentEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void CreateMarkerCompletedEventHandler(object sender, CreateMarkerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EditMarkerCompletedEventHandler(object sender, EditMarkerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetPermittedCitiesCompletedEventHandler(object sender, GetPermittedCitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermittedCitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermittedCitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetPermittedCountryCompletedEventHandler(object sender, GetPermittedCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermittedCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermittedCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RegisterTenantCompletedEventHandler(object sender, RegisterTenantCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterTenantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterTenantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RecoverPasswordCompletedEventHandler(object sender, RecoverPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecoverPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecoverPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SaveFavoriteArticleAndEventCompletedEventHandler(object sender, SaveFavoriteArticleAndEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFavoriteArticleAndEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFavoriteArticleAndEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SaveFavoriteMarkerCompletedEventHandler(object sender, SaveFavoriteMarkerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFavoriteMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFavoriteMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RemoveFavoriteArticleAndEventCompletedEventHandler(object sender, RemoveFavoriteArticleAndEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFavoriteArticleAndEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFavoriteArticleAndEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RemoveFavoriteMarkerCompletedEventHandler(object sender, RemoveFavoriteMarkerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFavoriteMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFavoriteMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetFavoritsArticlAndEventCompletedEventHandler(object sender, GetFavoritsArticlAndEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFavoritsArticlAndEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFavoritsArticlAndEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetFavoritsMarkerCompletedEventHandler(object sender, GetFavoritsMarkerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFavoritsMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFavoritsMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetRelatedEventsFromMarkerCompletedEventHandler(object sender, GetRelatedEventsFromMarkerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRelatedEventsFromMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRelatedEventsFromMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591